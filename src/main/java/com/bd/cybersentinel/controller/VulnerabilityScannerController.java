package com.bd.cybersentinel.controller;

import com.bd.cybersentinel.annotation.RestApiController;
import com.bd.cybersentinel.dto.req.VulnerabilityScannerReqDto;
import com.bd.cybersentinel.dto.res.VulnerabilityScannerResDTO;
import com.bd.cybersentinel.service.VulnerabilityScannerService;
import com.bd.cybersentinel.util.Response;
import io.swagger.v3.oas.annotations.Hidden;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.web.bind.annotation.*;


@RestApiController
@RequestMapping("/vulnerability")
@Tag(name = "3.0 Vulnerability Scanner", description = "API")
public class VulnerabilityScannerController extends AbstractBaseController<VulnerabilityScannerResDTO, VulnerabilityScannerReqDto>{
	
	private VulnerabilityScannerService<VulnerabilityScannerResDTO, VulnerabilityScannerReqDto> vulnerabilityScannerService;

	public VulnerabilityScannerController(VulnerabilityScannerService<VulnerabilityScannerResDTO, VulnerabilityScannerReqDto> vulnerabilityScannerService) {
		super(vulnerabilityScannerService);
		this.vulnerabilityScannerService = vulnerabilityScannerService;
	}

	@Operation(summary = "Scan For SQL Injection")
	@GetMapping("/scan")
	public Response<VulnerabilityScannerResDTO> scanForSqlInjection(@RequestParam String url) {
		return vulnerabilityScannerService.testSqlInjection(url);
	}

	@Operation(summary = "Check Password Strength")
	@GetMapping("/password-strength")
	public Response<VulnerabilityScannerResDTO> checkPasswordStrength(@RequestParam String password) {
		return vulnerabilityScannerService.checkPasswordStrength(password);
	}

	@Operation(summary = "Encode By Base64")
	@GetMapping("/password-encoder")
	public Response<VulnerabilityScannerResDTO> getEncryptedPassword(@RequestParam String password) {
		return vulnerabilityScannerService.encode(password);
	}

	@Operation(summary = "Decode By Base64")
	@GetMapping("/password-decoder")
	public Response<VulnerabilityScannerResDTO> getDecryptedPassword(@RequestParam String password) {
		return vulnerabilityScannerService.decode(password);
	}

	@Hidden
	@Override
	public Response<VulnerabilityScannerResDTO> save(VulnerabilityScannerReqDto vulnerabilityScannerReqDto) {
		return super.save(vulnerabilityScannerReqDto);
	}

	@Hidden
	@Override
	public Response<VulnerabilityScannerResDTO> update(VulnerabilityScannerReqDto vulnerabilityScannerReqDto) {
		return super.update(vulnerabilityScannerReqDto);
	}

	@Hidden
	@Override
	public Response<VulnerabilityScannerResDTO> find(Long id) {
		return super.find(id);
	}

	@Hidden
	@Override
	public Response<VulnerabilityScannerResDTO> delete(VulnerabilityScannerReqDto vulnerabilityScannerReqDto) {
		return super.delete(vulnerabilityScannerReqDto);
	}

	@Hidden
	@Override
	public Response<VulnerabilityScannerResDTO> remove(Long id) {
		return super.remove(id);
	}
}
